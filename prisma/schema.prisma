generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum GamificationActionType {
  ANSWER_UPVOTED
  SOLUTION_MARKED
  DAILY_LOGIN
  COMMENT_CREATED
  PROFILE_COMPLETED
  UPVOTE_GIVEN
  DOWNVOTE_GIVEN
}

enum AchievementCode {
  GOOD_SAMARITAN
  PERSISTENT_USER
  MENTOR
  CURATOR
  PIONEER
  NIGHT_OWL
}

// ---------- Models ----------
model User {
  id               String   @id @default(uuid()) @db.Uuid
  email            String   @unique
  name             String?
  password         String
  avatarUrl        String?
  bio              String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Novos campos
  reputationPoints Int      @default(0) @map("reputation_points")
  currencyBalance  Int      @default(0) @map("currency_balance")
  currentLevel     Int      @default(1) @map("current_level")

  // Relações
  actionLogs       GamificationActionLog[]
  achievements     UserAchievement[]
  questionsAuthored Question[]
  answersAuthored   Answer[]
  commentsAuthored  Comment[]
  questionVotes     QuestionVote[]
  answerVotes       AnswerVote[]
  conversationsA    Conversation[] @relation("ConversationUserA")
  conversationsB    Conversation[] @relation("ConversationUserB")
  messagesSent      Message[]      @relation("MessagesSentByUser")
  messagesReceived  Message[]      @relation("MessagesReceivedByUser")
  notifications     Notification[]
  currencyTx        CurrencyTransaction[]

  @@map("users")
}

model GamificationActionLog {
  id               String                 @id @default(uuid()) @db.Uuid
  userId           String                 @db.Uuid @map("user_id")
  user             User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  actionType       GamificationActionType @map("action_type")
  repChange        Int                    @map("rep_change")
  currencyChange   Int                    @map("currency_change")
  relatedEntityId  String?                @map("related_entity_id")
  processedAt      DateTime               @default(now()) @map("processed_at")
  metadata         Json?                  @map("metadata")
  createdAt        DateTime               @default(now()) @map("created_at")

  @@index([userId], map: "idx_gam_act_user_id")
  @@index([actionType], map: "idx_gam_act_action_type")
  @@index([createdAt], map: "idx_gam_act_created_at")
  @@index([userId, actionType, createdAt], map: "idx_gam_act_user_action_created")
  @@map("gamification_action_log")
}

model UserAchievement {
  id              String           @id @default(uuid()) @db.Uuid
  userId          String           @db.Uuid @map("user_id")
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementCode AchievementCode  @map("achievement_code")
  unlockedAt      DateTime         @default(now()) @map("unlocked_at")

  @@unique([userId, achievementCode], map: "uq_user_achievement_once")
  @@index([userId], map: "idx_user_achievement_user_id")
  @@map("user_achievements")
}


// ---------- Enums adicionais ----------
enum VoteType {
  UP
  DOWN
}

enum NotificationType {
  ANSWER
  VOTE
  ACCEPTED
  MENTION
  BADGE
  SUCCESS
  REPLY
  COMMENT
}

enum NotificationPriority {
  HIGH
  NORMAL
  LOW
}

enum MediaType {
  IMAGE
  VIDEO
}

enum TransactionType {
  REWARD
  PURCHASE
  TRANSFER
  ADJUST
}

// ---------- Core Q&A ----------
model Question {
  id               String      @id @default(uuid()) @db.Uuid
  title            String
  content          String
  authorId         String      @db.Uuid @map("author_id")
  author           User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  acceptedAnswerId String?     @unique @db.Uuid @map("accepted_answer_id")
  acceptedAnswer   Answer?     @relation("AcceptedAnswer", fields: [acceptedAnswerId], references: [id])
  views            Int         @default(0)
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")

  // Relations
  answers          Answer[]
  comments         Comment[]
  questionTags     QuestionTag[]
  votes            QuestionVote[]
  media            Media[]

  @@index([authorId], map: "idx_questions_author_id")
  @@index([createdAt], map: "idx_questions_created_at")
  @@map("questions")
}

model Answer {
  id              String      @id @default(uuid()) @db.Uuid
  questionId      String      @db.Uuid @map("question_id")
  question        Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  authorId        String      @db.Uuid @map("author_id")
  author          User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content         String
  isAccepted      Boolean     @default(false) @map("is_accepted")
  parentAnswerId  String?     @db.Uuid @map("parent_answer_id")
  parentAnswer    Answer?     @relation("AnswerReplies", fields: [parentAnswerId], references: [id])
  replies         Answer[]    @relation("AnswerReplies")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  comments        Comment[]
  votes           AnswerVote[]
  acceptedIn      Question?   @relation("AcceptedAnswer")

  @@index([questionId], map: "idx_answers_question_id")
  @@index([authorId], map: "idx_answers_author_id")
  @@index([createdAt], map: "idx_answers_created_at")
  @@map("answers")
}

model Comment {
  id         String    @id @default(uuid()) @db.Uuid
  authorId   String    @db.Uuid @map("author_id")
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questionId String?   @db.Uuid @map("question_id")
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerId   String?   @db.Uuid @map("answer_id")
  answer     Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")

  @@index([questionId], map: "idx_comments_question_id")
  @@index([answerId], map: "idx_comments_answer_id")
  @@index([authorId], map: "idx_comments_author_id")
  @@map("comments")
}

model Tag {
  id          String       @id @default(uuid()) @db.Uuid
  slug        String       @unique
  name        String
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")

  // Relations
  questionTags QuestionTag[]

  @@map("tags")
}

model QuestionTag {
  questionId String   @db.Uuid @map("question_id")
  tagId      String   @db.Uuid @map("tag_id")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")

  @@id([questionId, tagId])
  @@index([tagId], map: "idx_question_tag_tag_id")
  @@map("question_tags")
}

model QuestionVote {
  id         String    @id @default(uuid()) @db.Uuid
  questionId String    @db.Uuid @map("question_id")
  userId     String    @db.Uuid @map("user_id")
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       VoteType
  createdAt  DateTime  @default(now()) @map("created_at")

  @@unique([questionId, userId], map: "uq_question_vote_once")
  @@index([userId], map: "idx_question_vote_user_id")
  @@map("question_votes")
}

model AnswerVote {
  id        String   @id @default(uuid()) @db.Uuid
  answerId  String   @db.Uuid @map("answer_id")
  userId    String   @db.Uuid @map("user_id")
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      VoteType
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([answerId, userId], map: "uq_answer_vote_once")
  @@index([userId], map: "idx_answer_vote_user_id")
  @@map("answer_votes")
}

model Media {
  id         String     @id @default(uuid()) @db.Uuid
  questionId String?    @db.Uuid @map("question_id")
  question   Question?  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  type       MediaType
  url        String
  name       String?
  size       Int?
  createdAt  DateTime   @default(now()) @map("created_at")

  @@index([questionId], map: "idx_media_question_id")
  @@map("media_items")
}

// ---------- Chat ----------
model Conversation {
  id            String    @id @default(uuid()) @db.Uuid
  userAId       String    @db.Uuid @map("user_a_id")
  userBId       String    @db.Uuid @map("user_b_id")
  userA         User      @relation("ConversationUserA", fields: [userAId], references: [id], onDelete: Cascade)
  userB         User      @relation("ConversationUserB", fields: [userBId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now()) @map("created_at")
  lastMessageAt DateTime? @map("last_message_at")
  messages      Message[]

  @@unique([userAId, userBId], map: "uq_conversation_pair_ordered")
  @@index([lastMessageAt], map: "idx_conversation_last_message_at")
  @@map("conversations")
}

model Message {
  id             String       @id @default(uuid()) @db.Uuid
  conversationId String       @db.Uuid @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String       @db.Uuid @map("sender_id")
  receiverId     String       @db.Uuid @map("receiver_id")
  sender         User         @relation("MessagesSentByUser", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User         @relation("MessagesReceivedByUser", fields: [receiverId], references: [id], onDelete: Cascade)
  content        String
  timestamp      DateTime     @default(now())
  read           Boolean      @default(false)

  @@index([conversationId, timestamp], map: "idx_message_conversation_timestamp")
  @@index([receiverId, read], map: "idx_message_receiver_read")
  @@map("messages")
}

// ---------- Notificações ----------
model Notification {
  id        String                @id @default(uuid()) @db.Uuid
  userId    String                @db.Uuid @map("user_id")
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  priority  NotificationPriority  @default(NORMAL)
  title     String
  message   String
  link      String?
  read      Boolean               @default(false)
  createdAt DateTime              @default(now()) @map("created_at")

  @@index([userId, read, createdAt], map: "idx_notifications_user_read_created")
  @@map("notifications")
}

// ---------- Economia / Transações ----------
model CurrencyTransaction {
  id               String                  @id @default(uuid()) @db.Uuid
  userId           String                  @db.Uuid @map("user_id")
  user             User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type             TransactionType
  amount           Int
  sourceAction     GamificationActionType? @map("source_action")
  relatedEntityId  String?                 @map("related_entity_id")
  metadata         Json?
  createdAt        DateTime                @default(now()) @map("created_at")

  @@index([userId, createdAt], map: "idx_currency_tx_user_created")
  @@map("currency_transactions")
}

