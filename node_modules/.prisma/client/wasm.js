
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  avatarUrl: 'avatarUrl',
  bio: 'bio',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reputationPoints: 'reputationPoints',
  currencyBalance: 'currencyBalance',
  currentLevel: 'currentLevel'
};

exports.Prisma.GamificationActionLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  actionType: 'actionType',
  repChange: 'repChange',
  currencyChange: 'currencyChange',
  relatedEntityId: 'relatedEntityId',
  processedAt: 'processedAt',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementCode: 'achievementCode',
  unlockedAt: 'unlockedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  authorId: 'authorId',
  acceptedAnswerId: 'acceptedAnswerId',
  views: 'views',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnswerScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  authorId: 'authorId',
  content: 'content',
  isAccepted: 'isAccepted',
  parentAnswerId: 'parentAnswerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  questionId: 'questionId',
  answerId: 'answerId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.QuestionTagScalarFieldEnum = {
  questionId: 'questionId',
  tagId: 'tagId',
  createdAt: 'createdAt'
};

exports.Prisma.QuestionVoteScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  userId: 'userId',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.AnswerVoteScalarFieldEnum = {
  id: 'id',
  answerId: 'answerId',
  userId: 'userId',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  type: 'type',
  url: 'url',
  name: 'name',
  size: 'size',
  createdAt: 'createdAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  userAId: 'userAId',
  userBId: 'userBId',
  createdAt: 'createdAt',
  lastMessageAt: 'lastMessageAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  senderId: 'senderId',
  receiverId: 'receiverId',
  content: 'content',
  timestamp: 'timestamp',
  read: 'read'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  priority: 'priority',
  title: 'title',
  message: 'message',
  link: 'link',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.CurrencyTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  amount: 'amount',
  sourceAction: 'sourceAction',
  relatedEntityId: 'relatedEntityId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.GamificationActionType = exports.$Enums.GamificationActionType = {
  ANSWER_UPVOTED: 'ANSWER_UPVOTED',
  SOLUTION_MARKED: 'SOLUTION_MARKED',
  DAILY_LOGIN: 'DAILY_LOGIN',
  COMMENT_CREATED: 'COMMENT_CREATED',
  PROFILE_COMPLETED: 'PROFILE_COMPLETED',
  UPVOTE_GIVEN: 'UPVOTE_GIVEN',
  DOWNVOTE_GIVEN: 'DOWNVOTE_GIVEN'
};

exports.AchievementCode = exports.$Enums.AchievementCode = {
  GOOD_SAMARITAN: 'GOOD_SAMARITAN',
  PERSISTENT_USER: 'PERSISTENT_USER',
  MENTOR: 'MENTOR',
  CURATOR: 'CURATOR',
  PIONEER: 'PIONEER',
  NIGHT_OWL: 'NIGHT_OWL'
};

exports.VoteType = exports.$Enums.VoteType = {
  UP: 'UP',
  DOWN: 'DOWN'
};

exports.MediaType = exports.$Enums.MediaType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  ANSWER: 'ANSWER',
  VOTE: 'VOTE',
  ACCEPTED: 'ACCEPTED',
  MENTION: 'MENTION',
  BADGE: 'BADGE',
  SUCCESS: 'SUCCESS',
  REPLY: 'REPLY',
  COMMENT: 'COMMENT'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  HIGH: 'HIGH',
  NORMAL: 'NORMAL',
  LOW: 'LOW'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  REWARD: 'REWARD',
  PURCHASE: 'PURCHASE',
  TRANSFER: 'TRANSFER',
  ADJUST: 'ADJUST'
};

exports.Prisma.ModelName = {
  User: 'User',
  GamificationActionLog: 'GamificationActionLog',
  UserAchievement: 'UserAchievement',
  Question: 'Question',
  Answer: 'Answer',
  Comment: 'Comment',
  Tag: 'Tag',
  QuestionTag: 'QuestionTag',
  QuestionVote: 'QuestionVote',
  AnswerVote: 'AnswerVote',
  Media: 'Media',
  Conversation: 'Conversation',
  Message: 'Message',
  Notification: 'Notification',
  CurrencyTransaction: 'CurrencyTransaction'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
